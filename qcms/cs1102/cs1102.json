[{"question": "What will be the value of x after the following code snippet?\nint x = 5;\nx *= 2 + 3;", "answers": [["a.", "10", false], ["b.", "15", false], ["c.", "25", true], ["d.", "30", false]]}, {"question": "Which of the following is not a valid Java identifier?", "answers": [["a.", "myVariable", false], ["b.", "_variable", false], ["c.", "123variable", true], ["d.", "$variable", false]]}, {"question": "Which of the following is the correct way to declare and initialize an array in Java?\n\na. int[ ] numbers = new int[5] {1, 2, 3, 4, 5};\nb. int[ ] numbers = {1, 2, 3, 4, 5};\nc. int numbers[ ] = new int[ ]{1, 2, 3, 4, 5};\nd. int numbers = [1, 2, 3, 4, 5];\n", "answers": [["a.", "Option a and Option b", false], ["b.", "Option b and Option c", true], ["c.", "Option c", false], ["d.", "Option b", false]]}, {"question": "What is the output of the following code snippet?\nint x = 5;\nint y = 2;\nint result = x % y;\nSystem.out.println(result);", "answers": [["a.", "3", false], ["b.", "2", false], ["c.", "1", true], ["d.", "0", false]]}, {"question": "What is the output of the following code snippet?\nint x = 5;\nint y = 2;\nSystem.out.println(x > y ? \"x is greater than y\" : \"x is less than or equal to y\");", "answers": [["a.", "x is greater than y", true], ["b.", "x is less than or equal to y", false], ["c.", "5", false], ["d.", "2", false]]}, {"question": "Which of the following is the correct way to declare a method in Java?", "answers": [["a.", "int myMethod( ) { }", true], ["b.", "void myMethod { }", false], ["c.", "myMethod( ) { }", false], ["d.", "int myMethod;", false]]}, {"question": "Which of the following is the correct way to declare a constant variable in Java?", "answers": [["a.", "final int PI = 3.14;", true], ["b.", "const int PI = 3.14;", false], ["c.", "int PI = 3.14;", false], ["d.", "static int PI = 3.14;", false]]}, {"question": "What is the result of the following code snippet?\nint x = 10;\nint y = 5;\nboolean result = (x > y) && (x != y);\nSystem.out.println(result);", "answers": [["a.", "True", true], ["b.", "False", false], ["c.", "10", false], ["d.", "5", false]]}, {"question": "Which of the following data types in Java is NOT used to store integer values?", "answers": [["a.", "int", false], ["b.", "long", false], ["c.", "byte", false], ["d.", "float", true]]}, {"question": "What is the value of \"result\" after executing the following code snippet?\nint result = 10;\nresult -= 2 * 3;", "answers": [["a.", "4", true], ["b.", "6", false], ["c.", "8", false], ["d.", "10", false]]}, {"question": "What is the output of the following code snippet?\nint i = 0;\nwhile (i < 5) {\nSystem.out.print(i + \" \");\ni++;\n}", "answers": [["a.", "0 1 2 3 4", true], ["b.", "1 2 3 4 5", false], ["c.", "0 1 2 3 4 5", false], ["d.", "1 2 3 4", false]]}, {"question": "What is the output of the following code snippet?\nint i = 0;\ndo {\nif (i == 3)\ncontinue;\nSystem.out.print(i + \" \");\ni++;\n} while (i < 5);", "answers": [["a.", "0 1 2 3 4", false], ["b.", "1 2 3 4", false], ["c.", "0 1 2", true], ["d.", "0 1 2 3", false]]}, {"question": "The continue statement is used to:", "answers": [["a.", "Terminate the program", false], ["b.", "Exit the current iteration of the loop and continue with the next iteration", true], ["c.", "Skip the remaining code in the loop and exit the loop entirely", false], ["d.", "Repeat a certain block of code", false]]}, {"question": "What is the output of the following code snippet?\nfor (int i = 1; i <= 3; i++) {\nfor (int j = 1; j <= 3; j++) {\nif (i == j)\ncontinue;\nSystem.out.print(i + j + \" \");\n}\n}", "answers": [["a.", "3 4 3 5 4 5", true], ["b.", "3 4 5 6", false], ["c.", "2 3 4 5 6 7 8", false], ["d.", "1 2 3 4 5 6 7 8", false]]}, {"question": "Which keyword is used to skip the remaining code in the loop and continue with the next iteration?", "answers": [["a.", "exit", false], ["b.", "skip", false], ["c.", "break", false], ["d.", "continue", true]]}, {"question": "Which control statement is used to prematurely terminate a loop and skip the remaining iterations?", "answers": [["a.", "break", true], ["b.", "continue", false], ["c.", "return", false], ["d.", "exit", false]]}, {"question": "When using a do-while loop, the code block is executed:", "answers": [["a.", "zero or more times", false], ["b.", "at least once", true], ["c.", "based on a specific condition", false], ["d.", "until the loop variable reaches a certain value", false]]}, {"question": "What is the output of the following code snippet?\nfor (int i = 1; i <= 3; i++) {\nfor (int j = 1; j <= 3; j++) {\nif (i == 2 && j == 2)\nbreak;\nSystem.out.print(i + j + \" \");\n}\n}", "answers": [["a.", "2 3 4 3 5 6 7", false], ["b.", "2 3 4 6 7 8 4", false], ["c.", "2 3 4 3 4 5 6", true], ["d.", "1 2 3 4 5 6 7 8", false]]}, {"question": "What is the output of the following code snippet?\nint i = 0;\nouter:\nwhile (i < 5) {\ninner:\nfor (int j = 0; j < 3; j++) {\nif (i == 3)\nbreak outer;\nif (j == 2)\ncontinue inner;\nSystem.out.print(i + j + \" \");\n}\ni++;\n}", "answers": [["a.", "0 1 2 3 4 5 6 7", false], ["b.", "0 1 1 2 2 3", true], ["c.", "0 1 2 3 4 5", false], ["d.", "0 1 2 4 5 6 7 8", false]]}, {"question": "What is the output of the following code snippet?\nfor (int i = 0; i <= 10; i += 2) {\nSystem.out.print(i + \" \");\n}", "answers": [["a.", "0 2 4 6 8 10", true], ["b.", "2 4 6 8 10", false], ["c.", "0 2 4 6 8", false], ["d.", "2 4 6 8", false]]}, {"question": "Which of the following statements is true about method overriding in Java?", "answers": [["a.", "Method overriding is not allowed in Java.", false], ["b.", "A static method can override a non-static method.", false], ["c.", "The overridden method in the subclass must have the same access modifier as the superclass method.", true], ["d.", "A non-static method can override a static method.", false]]}, {"question": "Which keyword is used to exit from a loop in Java?", "answers": [["a.", "terminate", false], ["b.", "exit", false], ["c.", "break", true], ["d.", "stop", false]]}, {"question": "What is the purpose of a break statement in a loop?", "answers": [["a.", "To skip the remaining code in the loop and continue with the next iteration", false], ["b.", "To exit the current iteration of the loop", false], ["c.", "To exit the loop entirely", true], ["d.", "To terminate the program", false]]}, {"question": "Which of the following is NOT a logical operator in Java?", "answers": [["a.", "||", false], ["b.", "&", true], ["c.", "!", false], ["d.", "&&", false]]}, {"question": "What is the output of the following code snippet?\nint i = 5;\nwhile (i > 0) {\nSystem.out.print(i + \" \");\ni--;\n}", "answers": [["a.", "4 3 2 1 0", false], ["b.", "5 4 3 2 1 0", false], ["c.", "4 3 2 1", false], ["d.", "5 4 3 2 1", true]]}, {"question": "What is the output of the following code snippet?\n\nclass Parent {\nstatic void print() {\nSystem.out.println(\"Parent\");\n}\n}\nclass Child extends Parent {\nstatic void print() {\nSystem.out.println(\"Child\");\n}\n}\npublic class Main {\npublic static void main(String[] args) {\nParent obj = new Child();\nobj.print();\n}\n}\n", "answers": [["a.", "Parent", true], ["b.", "Compilation error", false], ["c.", "Child", false], ["d.", "Runtime error", false]]}, {"question": "In a while loop, the condition is checked:", "answers": [["a.", "both before and after executing the loop body", false], ["b.", "none of the above", false], ["c.", "before executing the loop body", true], ["d.", "after executing the loop body", false]]}, {"question": "Which of the following loop control structures executes the loop body at least once, even if the condition is false initially?", "answers": [["a.", "foreach", false], ["b.", "do-while", true], ["c.", "for", false], ["d.", "while", false]]}, {"question": "What is the output of the following code snippet?\nint i = 1;\nwhile (i <= 5) {\nif (i % 2 == 0)\ncontinue;\nSystem.out.print(i + \" \");\ni++;\n}", "answers": [["a.", "2 4", false], ["b.", "1 3 5", false], ["c.", "1 2 3 4 5", false], ["d.", "The code will result in an infinite loop.", true]]}, {"question": "What is the result of the following code snippet?\nint x = 10;\nx *= 2 + 3;\nSystem.out.println(x);", "answers": [["a.", "50", true], ["b.", "15", false], ["c.", "60", false], ["d.", "25", false]]}, {"question": "Which of the following is an example of a static variable?\n", "answers": [["a.", "void printName() {}", false], ["b.", "public static int count = 0;", true], ["c.", "int x = 10;", false], ["d.", "private String name;", false]]}, {"question": "What will be the output of the following code snippet?\nint num = 7;\nswitch (num) {\ncase 1:\nSystem.out.println(\"One\");\nbreak;\ncase 2:\nSystem.out.println(\"Two\");\nbreak;\ndefault:\nSystem.out.println(\"Other\");\n}", "answers": [["a.", "Other", true], ["b.", "Compilation error", false], ["c.", "One", false], ["d.", "Two", false]]}, {"question": "Which of the following is the correct way to declare a constructor in Java?", "answers": [["a.", "void MyClass( ) { }", false], ["b.", "MyClass ( ) { }", true], ["c.", "MyClass = new Constructor { }", false], ["d.", "constructor MyClass( ) { }", false]]}, {"question": "What is the output of the following code snippet?\nint x = 10;\nint y = 3;\nSystem.out.println(x % y);", "answers": [["a.", "2", false], ["b.", "3", false], ["c.", "4", false], ["d.", "1", true]]}, {"question": "What is the output of the following code snippet?\nint i = 0;\nwhile (i < 5) {\nif (i == 3)\nbreak;\nSystem.out.print(i + \" \");\ni++;\n}", "answers": [["a.", "0 1 2", true], ["b.", "0 1 2 3 4", false], ["c.", "1 2 3 4", false], ["d.", "0 1 2 4", false]]}, {"question": "Which keyword is used to catch exceptions in Java?", "answers": [["a.", "throw", false], ["b.", "try", false], ["c.", "finally", false], ["d.", "catch", true]]}, {"question": "What is the scope of a static variable in Java?", "answers": [["a.", "It is limited to the method in which it is declared.", false], ["b.", "It is limited to the package in which it is declared.", false], ["c.", "It is limited to the block in which it is declared.", false], ["d.", "It is limited to the class in which it is declared.", true]]}, {"question": "What is the purpose of the \"==\" operator in Java?", "answers": [["a.", "Perform logical OR operation", false], ["b.", "Perform arithmetic addition", false], ["c.", "Assign a value to a variable", false], ["d.", "Compare two values for equality", true]]}, {"question": "What is the output of the following code?\nint x = 10;\nif (x > 5) {\nSystem.out.print(\"Hello\");\nif (x < 15) {\nSystem.out.println(\"World\");\n}\n}", "answers": [["a.", "World", false], ["b.", "Hello", false], ["c.", "Hello World", true], ["d.", "No output", false]]}, {"question": "Which of the following is a valid way to access a static variable within a non-static method?\n", "answers": [["a.", "super.variableName", false], ["b.", "variableName", false], ["c.", "this.variableName", false], ["d.", "className.variableName", true]]}, {"question": "Which of the following statements is true about static blocks in Java?", "answers": [["a.", "They are used to define constants in a class.", false], ["b.", "They are executed when an instance of a class is created.", false], ["c.", "They are executed before the main method.", true], ["d.", "They can access non-static variables directly.", false]]}, {"question": "Which of the following statements is true about static methods?", "answers": [["a.", "They can be overridden in the subclass.", false], ["b.", "They can access non-static methods and variables directly.", false], ["c.", "They can be called using the instance of a class.", false], ["d.", "They cannot access non-static methods and variables directly.", true]]}, {"question": "What is the output of the following code snippet?\nclass MyClass {\nstatic int count = 0;\npublic MyClass() {\ncount++;\n}\npublic static int getCount() {\nreturn count;\n}\n}\npublic class Main {\npublic static void main(String[] args) {\nMyClass obj1 = new MyClass();\nMyClass obj2 = new MyClass();\nSystem.out.println(MyClass.getCount());\n}\n}\n", "answers": [["a.", "0", false], ["b.", "1", false], ["c.", "2", true], ["d.", "Compilation error", false]]}, {"question": "Which of the following is an advantage of using static methods and variables?", "answers": [["a.", "They allow for better encapsulation and information hiding.", false], ["b.", "They can be overridden in the subclass for polymorphism.", false], ["c.", "They can be accessed without creating an instance of a class.", true], ["d.", "They allow for dynamic binding and late binding.", false]]}, {"question": "What happens when an instance variable with the same name as a static variable is declared in a class?", "answers": [["a.", "The instance variable shadows the static variable.", true], ["b.", "The static variable shadows the instance variable.", false], ["c.", "Both variables are accessible without any conflict.", false], ["d.", "It causes a compilation error.", false]]}, {"question": "Which of the following statements is true about static nested classes?", "answers": [["a.", "They can access non-static methods and variables of the outer class directly.", false], ["b.", "They can be instantiated without an instance of the outer class.", true], ["c.", "They can only be declared within static methods.", false], ["d.", "They can be inherited by the subclasses of the outer class.", false]]}, {"question": "To differentiate between a static method and a non-static (instance) method, you would primarily:", "answers": [["a.", "Test their execution time", false], ["b.", "Verify their return type", false], ["c.", "Determine their association with class or instances", true], ["d.", "Relate them to their superclass", false]]}, {"question": "Which keyword is used to prevent a method from being overridden in the subclass?", "answers": [["a.", "final", true], ["b.", "static", false], ["c.", "abstract", false], ["d.", "private", false]]}, {"question": "Which of the following is a disadvantage of using static methods and variables?", "answers": [["a.", "They can only be accessed within the same class.", false], ["b.", "They can lead to potential conflicts and synchronization issues in multi-threaded environments.", true], ["c.", "They cannot be used in inheritance hierarchies.", false], ["d.", "They have higher execution time compared to non-static methods and variables.", false]]}, {"question": "Which of the following is a valid way to access a static variable within a static method?", "answers": [["a.", "this.variableName", false], ["b.", "className.variableName", true], ["c.", "variableName", false], ["d.", "super.variableName", false]]}, {"question": "Which of the following is true about arrays and ArrayLists in Java?", "answers": [["a.", "Arrays are always faster than ArrayLists.", false], ["b.", "Arrays can store both primitive and object types, while ArrayLists can only store object types.", false], ["c.", "Arrays and ArrayLists have the same syntax for accessing and modifying elements.", false], ["d.", "Arrays have a fixed size, while ArrayLists can dynamically resize.", true]]}, {"question": "What happens when an element is inserted into an ArrayList and the capacity is already full?", "answers": [["a.", "The element is added at the end of the ArrayList.", false], ["b.", "The capacity of the ArrayList is automatically increased.", true], ["c.", "An exception is thrown.", false], ["d.", "The existing elements are shifted to accommodate the new element.", false]]}, {"question": "Which method is used to retrieve the element at a specific index in an array in Java?", "answers": [["a.", "get()", true], ["b.", "retrieve()", false], ["c.", "access()", false], ["d.", "fetch()", false]]}, {"question": "What is the output of the following code snippet?\n\nArrayList<String> fruits = new ArrayList<>();\nfruits.add(\"Apple\");\nfruits.add(\"Orange\");\nfruits.add(\"Banana\");\nSystem.out.println(fruits.size());\n\n", "answers": [["a.", "1", false], ["b.", "2", false], ["c.", "3", true], ["d.", "0", false]]}, {"question": "Which method is used to replace the element at a specific index in an ArrayList in Java?", "answers": [["a.", "set()", true], ["b.", "replace()", false], ["c.", "modify()", false], ["d.", "assign()", false]]}, {"question": "What is the output of the following code snippet?\n\nArrayList<String> names = new ArrayList<>();\nnames.add(\"John\");\nnames.add(\"Jane\");\nSystem.out.println(names.size());\n", "answers": [["a.", "0", false], ["b.", "1", false], ["c.", "2", true], ["d.", "Error", false]]}, {"question": "What is the output of the following code snippet?\n\nint[ ] numbers = new int[5];\nSystem.out.println(numbers[3]);\n\n", "answers": [["a.", "0", true], ["b.", "null", false], ["c.", "error", false], ["d.", "ArrayIndexOutOfBoundsException", false]]}, {"question": "What is the output of the following code snippet?\n\nint[ ] numbers = {5, 2, 8, 1, 3};\nArrays.sort(numbers);\nSystem.out.println(numbers[0]);\n", "answers": [["a.", "1", true], ["b.", "2", false], ["c.", "3", false], ["d.", "5", false]]}, {"question": "What is the output of the following code snippet?\n\nArrayList<Integer> numbers = new ArrayList<>();\nnumbers.add(1);\nnumbers.add(2);\nSystem.out.println(numbers.get(1));\n\n", "answers": [["a.", "1", false], ["b.", "2", true], ["c.", "0", false], ["d.", "Error", false]]}, {"question": "What is the output of the following code snippet?\n\nint[] numbers = {5, 2, 7, 1, 8};\nArrays.sort(numbers);\nSystem.out.println(numbers[2]);\n\n", "answers": [["a.", "5", true], ["b.", "7", false], ["c.", "2", false], ["d.", "1", false]]}, {"question": "Which of the following code snippets correctly demonstrates the creation of an object in Java?\n", "answers": [["a.", "new Object();", false], ["b.", "Object obj = Object();", false], ["c.", "Object obj = new Object;", false], ["d.", "Object obj = new Object();", true]]}, {"question": "How does the concept of polymorphism contribute to code flexibility and extensibility in object-oriented programming?", "answers": [["a.", "It allows objects to inherit attributes and behaviors from other objects.", false], ["b.", "It facilitates code reuse and modularity.", false], ["c.", "It enables the creation of objects from classes.", false], ["d.", "It allows objects to be represented as instances of multiple classes.", true]]}, {"question": "How are constructors used in object-oriented programming?", "answers": [["a.", "To define attributes and methods of an object", false], ["b.", "To allocate memory for object variables", false], ["c.", "To initialize object attributes with predefined values", true], ["d.", "To establish communication between classes", false]]}, {"question": "What is the significance of inheritance in object-oriented programming?", "answers": [["a.", "It allows objects to communicate with each other.", false], ["b.", "It ensures that attributes and methods are defined within a class.", false], ["c.", "It enables the creation of subclasses that inherit characteristics from a parent class.", true], ["d.", "It facilitates the encapsulation of data and behavior within objects.", false]]}, {"question": "In OOP, what is the purpose of the \"this\" keyword?", "answers": [["a.", "To reference the current object within a method", true], ["b.", "To declare a variable with class scope", false], ["c.", "To instantiate a new object", false], ["d.", "To define a constructor for the class", false]]}, {"question": "Which access modifier allows a class member to be accessed only within the same class?", "answers": [["a.", "public", false], ["b.", "private", true], ["c.", "protected", false], ["d.", "default (no modifier)", false]]}, {"question": "Which of the following statements about inheritance in Java is true?", "answers": [["a.", "Inheritance promotes code duplication.", false], ["b.", "Inheritance allows a subclass to inherit the private members of its superclass.", false], ["c.", "Multiple inheritance is supported in Java through interfaces.", true], ["d.", "Inheritance is only used to establish an \"is-a\" relationship between classes.", false]]}, {"question": "Which of the following is the correct way to declare and initialize an array in Java?\n\na. int[ ] numbers = new int[5] {1, 2, 3, 4, 5};\nb. int[ ] numbers = {1, 2, 3, 4, 5};\nc. int numbers[ ] = new int[ ]{1, 2, 3, 4, 5};\nd. int numbers = [1, 2, 3, 4, 5];\n", "answers": [["a.", "Option c", false], ["b.", "Option b and Option c", true], ["c.", "Option a and Option b", false], ["d.", "Option b", false]]}, {"question": "Which ArrayList method is used to remove the first occurrence of a specific element from the list?", "answers": [["a.", "erase()", false], ["b.", "remove()", true], ["c.", "removeFirst()", false], ["d.", "delete()", false]]}, {"question": "What is the primary purpose of access modifiers in object-oriented programming?", "answers": [["a.", "To create new instances of a class.", false], ["b.", "To define the class constructor.", false], ["c.", "To control access to class members and manage encapsulation.", true], ["d.", "To specify the order of method execution in a class.", false]]}, {"question": "What is the main difference between method overloading and method overriding in Java?", "answers": [["a.", "Method overloading is used for private methods, while method overriding is used for public methods.", false], ["b.", "Method overloading allows for multiple methods with the same name but different parameters, while method overriding involves redefining a method in a subclass with the same name and parameters as in the superclass.", true], ["c.", "Method overloading allows for different return types, while method overriding does not.", false], ["d.", "Method overloading is only applicable to interfaces, while method overriding is applicable to classes.", false]]}, {"question": "In object-oriented programming, what is a class?", "answers": [["a.", "A specific instance of an object", false], ["b.", "A memory allocation for variables", false], ["c.", "A collection of attributes and methods", false], ["d.", "A blueprint or template for creating objects", true]]}, {"question": "Which of the following is a benefit of using interfaces in Java programming?", "answers": [["a.", "Interfaces promote loose coupling and modularity.", true], ["b.", "Interfaces make code more complex and harder to understand.", false], ["c.", "Interfaces eliminate the need for inheritance.", false], ["d.", "Interfaces allow for multiple inheritance of classes.", false]]}, {"question": "To access an element at a specific index in an array, which of the following syntax is correct?\n", "answers": [["a.", "array.element(index)", false], ["b.", "array.access(index)", false], ["c.", "array.get(index)", false], ["d.", "array[index]", true]]}, {"question": "How does the concept of abstraction contribute to code maintainability and readability in object-oriented programming?", "answers": [["a.", "Abstraction allows for dynamic binding of methods at runtime.", false], ["b.", "Abstraction provides a high-level view of a class, hiding unnecessary implementation details.", true], ["c.", "Abstraction simplifies complex code structures and reduces code duplication.", false], ["d.", "Abstraction allows for code reuse through inheritance and polymorphism.", false]]}, {"question": "What is the purpose of the \"static\" keyword when applied to a method in object-oriented programming?", "answers": [["a.", "To indicate that a method can only be called by other static methods", false], ["b.", "To prevent a method from being overridden in a subclass", false], ["c.", "To allow direct access to the method without creating an object instance", true], ["d.", "To allocate memory for variables within the method", false]]}, {"question": "What is the output of the following code snippet?\nint[] numbers = {1, 2, 3, 4, 5};\nSystem.out.println(numbers.length);\n", "answers": [["a.", "1", false], ["b.", "5", true], ["c.", "0", false], ["d.", "4", false]]}, {"question": "What is the purpose of a private instance method in a class?", "answers": [["a.", "It can be accessed from any subclass.", false], ["b.", "It can only be accessed within the same class.", true], ["c.", "It can be accessed from any class within the same package.", false], ["d.", "It can be accessed from any class.", false]]}, {"question": "In Java, what does it mean when a subclass \"extends\" a superclass?", "answers": [["a.", "The subclass inherits all the non-private methods and fields of the superclass.", true], ["b.", "The superclass becomes an instance of the subclass.", false], ["c.", "The subclass can only access public methods of the superclass.", false], ["d.", "The subclass can override methods of the superclass.", false]]}, {"question": "What is the purpose of an abstract class in object-oriented programming?", "answers": [["a.", "To define a class that contains only abstract methods", false], ["b.", "To define a class that cannot be inherited by other classes", false], ["c.", "To define a class that cannot be instantiated but can be inherited by subclasses", true], ["d.", "To define a class that can only be instantiated once", false]]}, {"question": "Which of the following is true regarding the relationship between interfaces and abstract classes in Java?", "answers": [["a.", "Abstract classes can implement interfaces.", true], ["b.", "Abstract classes can override methods defined in interfaces.", false], ["c.", "Interfaces can extend abstract classes.", false], ["d.", "Interfaces and abstract classes cannot be used together in the same program.", false]]}, {"question": "What is the output of the following code snippet?\n\nclass Parent {\nprotected void print() {\nSystem.out.println(\"Parent\");\n}\n}\nclass Child extends Parent {\npublic void print() {\nSystem.out.println(\"Child\");\n}\n}\npublic class Main {\npublic static void main(String[] args) {\nParent parent = new Child();\nparent.print();\n}\n}\n\n", "answers": [["a.", "Parent", false], ["b.", "Compilation error", false], ["c.", "Runtime exception", false], ["d.", "Child", true]]}, {"question": "What is the output of the following code snippet?\nArrayList<String> colors = new ArrayList<>();\ncolors.add(\"Red\");\ncolors.add(\"Blue\");\ncolors.remove(\"Green\");\nSystem.out.println(colors.size());\n", "answers": [["a.", "1", false], ["b.", "0", false], ["c.", "Error", false], ["d.", "2", true]]}, {"question": "What is the output of the following code snippet?\n\nArrayList<Integer> numbers = new ArrayList<>();\nnumbers.add(1);\nnumbers.add(2);\nnumbers.set(1, 3);\nSystem.out.println(numbers.get(1));\n\n", "answers": [["a.", "2", false], ["b.", "1", false], ["c.", "3", true], ["d.", "Error", false]]}, {"question": "In Java, what is the role of interfaces?", "answers": [["a.", "Interfaces are used to restrict access to class members.", false], ["b.", "Interfaces enable multiple inheritance of classes.", false], ["c.", "Interfaces provide a blueprint for a class to implement a set of methods.", true], ["d.", "Interfaces define the implementation details of a class.", false]]}, {"question": "What is the term for the practice of bundling data (attributes) and methods (behaviors) that operate on the data within a single unit in object-oriented programming?", "answers": [["a.", "Abstraction", false], ["b.", "Encapsulation", true], ["c.", "Inheritance", false], ["d.", "Polymorphism", false]]}, {"question": "Interfaces in Java can be used to achieve:", "answers": [["a.", "Multiple inheritance.", true], ["b.", "Code encapsulation.", false], ["c.", "Method overloading.", false], ["d.", "Static method implementation.", false]]}, {"question": "Which of the following statements about inheritance and polymorphism is true in Java?", "answers": [["a.", "Inheritance and polymorphism are independent concepts and do not impact each other.", false], ["b.", "Inheritance is a prerequisite for polymorphism.", true], ["c.", "Polymorphism can only be achieved through method overloading.", false], ["d.", "Inheritance and polymorphism cannot be used together in the same program.", false]]}, {"question": "In Java, method overloading allows developers to:", "answers": [["a.", "Override a method inherited from a superclass.", false], ["b.", "Define multiple methods with the same name but different return types.", false], ["c.", "Define multiple methods with the same name but different access modifiers.", false], ["d.", "Define multiple methods with the same name but different parameters.", true]]}, {"question": "Which of the following statements about polymorphism in Java is true?", "answers": [["a.", "Polymorphism allows an object to take on multiple forms at runtime.", true], ["b.", "Polymorphism is achieved through method overriding.", false], ["c.", "Polymorphism can only be applied to interfaces, not classes.", false], ["d.", "Polymorphism is limited to compile-time behavior only.", false]]}, {"question": "In Java, what is the benefit of using inheritance?", "answers": [["a.", "It allows for code reuse and promotes a hierarchical structure.", true], ["b.", "It eliminates the need for polymorphism.", false], ["c.", "It makes code more complex and harder to maintain.", false], ["d.", "It reduces the performance of the program.", false]]}, {"question": "In Java, can a subclass access private member of its superclass?", "answers": [["a.", "Yes, subclass can access private members of its superclass.", false], ["b.", "No, subclass cannot access private members of its superclass.", true], ["c.", "It depends on the access modifiers used for the private members.", false], ["d.", "Subclass can access private members of its superclass only if they are overridden.", false]]}, {"question": "The process of defining a new class based on an existing class is known as:", "answers": [["a.", "Inheritance", true], ["b.", "Polymorphism", false], ["c.", "Encapsulation", false], ["d.", "Abstraction", false]]}, {"question": "What is the purpose of method overloading in Java?", "answers": [["a.", "To override superclass methods with more specific implementations.", false], ["b.", "To create multiple methods with the same name but different parameters.", true], ["c.", "To limit the number of methods in a class.", false], ["d.", "To restrict method access to subclasses only.", false]]}, {"question": "What is the purpose of the \"implements\" keyword in Java?", "answers": [["a.", "It is used to create an instance of a class.", false], ["b.", "It is used to mark a class as abstract.", false], ["c.", "It is used to indicate that a class is a subclass.", false], ["d.", "It is used to indicate that a class implements an interface.", true]]}, {"question": "Which of the following statements accurately summarizes the benefits of polymorphism in Java programming?", "answers": [["a.", "Polymorphism improves code readability and enhances code reusability.", true], ["b.", "Polymorphism restricts the flexibility of code execution.", false], ["c.", "Polymorphism increases code duplication and hampers code maintenance.", false], ["d.", "Polymorphism reduces the scalability of software systems.", false]]}, {"question": "Which JavaFX class is used to define the structure and layout of a user interface?", "answers": [["a.", "Stage", false], ["b.", "Scene", true], ["c.", "Pane", false], ["d.", "Application", false]]}, {"question": "What is the purpose of a JavaFX scene graph?", "answers": [["a.", "It defines the structure and layout of a user interface.", false], ["b.", "It represents the hierarchical structure of all the visual elements in a JavaFX application.", true], ["c.", "It manages the rendering and animation of visual elements in a JavaFX application.", false], ["d.", "It handles all the user events and actions in a JavaFX application.", false]]}, {"question": "Which JavaFX class is used to display a web page?", "answers": [["a.", "WebView", true], ["b.", "WebPane", false], ["c.", "WebDisplay", false], ["d.", "WebBrowser", false]]}, {"question": "How can you create a JavaFX application that extends the Application class?", "answers": [["a.", "By implementing the Application interface.", false], ["b.", "By creating a class that extends the Application class and overriding the start() method.", true], ["c.", "By calling the Application.create() method and passing a class that implements the Application interface.", false], ["d.", "By creating an instance of the Application class and calling the start() method.", false]]}, {"question": "Which JavaFX class is used to display text and images?", "answers": [["a.", "Text", false], ["b.", "Label", true], ["c.", "Button", false], ["d.", "Image", false]]}, {"question": "Which of the following frameworks is considered more modern and recommended for GUI development in Java?", "answers": [["a.", "AWT", false], ["b.", "Swing", false], ["c.", "JavaFX", true], ["d.", "JSP", false]]}, {"question": "In JavaFX, how can you apply animations to nodes?", "answers": [["a.", "By calling the animate() method on the node and passing an Animation object.", false], ["b.", "By setting the animation property of the node to an Animation object.", false], ["c.", "By using the AnimationTimer class to create custom animations for the node.", false], ["d.", "By using the Transition class and its subclasses to apply predefined animations to the node.", true]]}, {"question": "How can you create a tool tip in Java Swing?", "answers": [["a.", "By calling the setToolTipText() method on the component and passing the tool tip text.", true], ["b.", "By creating an instance of the ToolTip class and setting its text property.", false], ["c.", "By calling the addToolTip() method on the component and passing a ToolTip object.", false], ["d.", "By using the ToolTipManager class to manage tool tips for the component.", false]]}, {"question": "Which layout manager in Java Swing allows components to be arranged in a stack-like manner?", "answers": [["a.", "FlowLayout", false], ["b.", "BorderLayout", false], ["c.", "CardLayout", true], ["d.", "BoxLayout", false]]}, {"question": "How can you handle a mouse drag event in Java Swing?", "answers": [["a.", "By calling the setOnMouseDragged() method on the component and passing an event handler.", false], ["b.", "By overriding the component's mouseDragged() method.", true], ["c.", "By implementing the MouseDraggedListener interface in the component's class.", false], ["d.", "By calling the addMouseDraggedListener() method on the component and passing an event handler.", false]]}, {"question": "How can you display an error message dialog in JavaFX?", "answers": [["a.", "By calling the showErrorDialog() method on the Alert class and passing an error message.", false], ["b.", "By calling the showErrorMessage() method on the Dialog class and passing an error message.", false], ["c.", "By creating an instance of the ErrorDialog class and calling its show() method.", false], ["d.", "By using the Alert class and setting its alert type to Error.", true]]}, {"question": "How can you handle a mouse click event on a JavaFX button?", "answers": [["a.", "By calling the setOnMouseClicked() method on the button and passing an event handler.", true], ["b.", "By overriding the button's mouseClicked() method.", false], ["c.", "By implementing the EventHandler interface in the button's class.", false], ["d.", "By calling the addButtonClickListener() method on the button and passing an event handler.", false]]}, {"question": "How can you change the cursor shape in Java Swing?", "answers": [["a.", "By calling the setCursor() method on the component and passing a predefined cursor constant.", true], ["b.", "By setting the cursor property of the component to a predefined cursor constant.", false], ["c.", "By calling the setCursorShape() method on the component and passing a cursor shape object.", false], ["d.", "By calling the setCursorType() method on the component and passing a cursor type constant.", false]]}, {"question": "Which JavaFX class is used to create a 3D scene?", "answers": [["a.", "Scene3D", false], ["b.", "3DScene", false], ["c.", "SubScene", true], ["d.", "ThreeDScene", false]]}, {"question": "Event-driven programming in Java GUI development involves:", "answers": [["a.", "Writing sequential code that executes in a linear fashion.", false], ["b.", "Handling user actions and events through event listeners.", true], ["c.", "Using threads to handle user input.", false], ["d.", "Ignoring user interactions and focusing only on the graphical components.", false]]}, {"question": "Which verb best describes the process of designing and implementing a multithreaded application in Java?", "answers": [["a.", "Organize", false], ["b.", "Design", true], ["c.", "Generate", false], ["d.", "Enhance", false]]}, {"question": "Which method of the Iterator interface is used to check if there are more elements to iterate over?", "answers": [["a.", "hasNext()", true], ["b.", "next()", false], ["c.", "previous()", false], ["d.", "hasPrevious()", false]]}, {"question": "Which method of the Thread class is used to check if a thread is still active and running?", "answers": [["a.", "isAlive()", true], ["b.", "isActive()", false], ["c.", "isRunning()", false], ["d.", "isExecuting()", false]]}, {"question": "How does the Stream API simplify the processing of collections in Java?", "answers": [["a.", "By eliminating the need for loops and explicit iteration", true], ["b.", "By reducing memory consumption in collection operations", false], ["c.", "By providing automatic synchronization between multiple threads", false], ["d.", "By enforcing strict immutability on collections", false]]}, {"question": "Which interface in the Collection Hierarchy allows duplicate elements and maintains insertion order?", "answers": [["a.", "List", true], ["b.", "Set", false], ["c.", "Map", false], ["d.", "Iterator", false]]}, {"question": "What is the purpose of the Collection Hierarchy in Java?", "answers": [["a.", "To manage and manipulate groups of objects", true], ["b.", "To optimize multithreading performance", false], ["c.", "To summarize complex data structures", false], ["d.", "To enhance the functionality of stream operations", false]]}, {"question": "Which interface in the Collection Hierarchy maps keys to values and does not allow duplicate keys?", "answers": [["a.", "List", false], ["b.", "Set", false], ["c.", "Map", true], ["d.", "Iterator", false]]}, {"question": "Which Stream API operation is used to apply a function to each element and transform it into another element?", "answers": [["a.", "map()", true], ["b.", "filter()", false], ["c.", "reduce()", false], ["d.", "collect()", false]]}, {"question": "Which interface in the Collection Hierarchy allows traversal through a collection of elements?", "answers": [["a.", "List", false], ["b.", "Set", false], ["c.", "Map", false], ["d.", "Iterator", true]]}, {"question": "Which method of the Map interface is used to check if a specific key is present in the map?", "answers": [["a.", "containsKey()", true], ["b.", "hasKey()", false], ["c.", "keyExists()", false], ["d.", "includesKey()", false]]}, {"question": "Which method of the Map interface is used to retrieve the value associated with a given key?", "answers": [["a.", "get()", true], ["b.", "retrieve()", false], ["c.", "fetch()", false], ["d.", "obtain()", false]]}, {"question": "What is the purpose of the Iterator interface in the Collection Hierarchy?", "answers": [["a.", "To provide a way to iterate over the elements of a collection", true], ["b.", "To enforce immutability on the collection", false], ["c.", "To define a generic type for the collection", false], ["d.", "To enable parallel processing of the collection", false]]}]